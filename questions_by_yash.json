[
    {
        "problem_statement": "Write a function in Python that calculates the factorial of a given non-negative integer using recursion. The function must handle invalid inputs and return an error message if the input is not a non-negative integer.",
        "solution": "def compute_factorial(n):\n    if not isinstance(n, int) or n < 0:\n        return 'Error: Input must be a non-negative integer.'\n    if n == 0:\n        return 1\n    return n * compute_factorial(n - 1)",
        "test_cases": {
            "private": [
                {
                    "input": "7",
                    "output": "5040"
                },
                {
                    "input": "-5",
                    "output": "'Error: Input must be a non-negative integer.'"
                }
            ],
            "public": [
                {
                    "input": "3",
                    "output": "6"
                },
                {
                    "input": "0",
                    "output": "1"
                }
            ]
        }
    },
    {
        "problem_statement": "Create a function in Python that checks whether a given string is a palindrome. The function should ignore spaces, punctuation, and case differences.",
        "solution": "def check_palindrome(text):\n    clean_text = ''.join(char.lower() for char in text if char.isalnum())\n    return clean_text == clean_text[::-1]",
        "test_cases": {
            "private": [
                {
                    "input": "\"Step on no pets\"",
                    "output": "True"
                },
                {
                    "input": "\"Palindrome\"",
                    "output": "False"
                }
            ],
            "public": [
                {
                    "input": "\"Madam, in Eden, I'm Adam\"",
                    "output": "True"
                },
                {
                    "input": "\"Python\"",
                    "output": "False"
                }
            ]
        }
    },
    {
        "problem_statement": "Write a Python function that reads a list of integers from the input and prints the second highest unique number in the list. If the list has fewer than two unique numbers, print 'None'.",
        "solution": "def find_second_highest():\n    numbers = list(map(int, input().split()))\n    unique_numbers = list(set(numbers))\n    if len(unique_numbers) < 2:\n        print(None)\n    else:\n        unique_numbers.sort(reverse=True)\n        print(unique_numbers[1])",
        "test_cases": {
            "private": [
                {
                    "input": "12 45 45 67 89",
                    "output": "67"
                },
                {
                    "input": "100",
                    "output": "None"
                }
            ],
            "public": [
                {
                    "input": "4 2 9 5 9",
                    "output": "5"
                },
                {
                    "input": "3 3 3",
                    "output": "None"
                }
            ]
        }
    },
    {
        "problem_statement": "Create a function that generates all Fibonacci numbers less than or equal to a specified limit. The result should be returned as a list of numbers.",
        "solution": "def generate_fibonacci(limit):\n    if limit < 0:\n        return []\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] <= limit:\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[:-1] if limit < 1 else sequence",
        "test_cases": {
            "private": [
                {
                    "input": "30",
                    "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21]"
                },
                {
                    "input": "-2",
                    "output": "[]"
                }
            ],
            "public": [
                {
                    "input": "15",
                    "output": "[0, 1, 1, 2, 3, 5, 8, 13]"
                },
                {
                    "input": "1",
                    "output": "[0, 1, 1]"
                }
            ]
        }
    }
]